Freelancer Project Description: Salah Prayer App with Widget
Project Overview
We need a skilled mobile app developer to create a cross-platform Salah (Islamic prayer) app for Android and iOS, complete with a home screen widget. The app will allow users to select masjids (mosques) and display their prayer times on the widget. Additional features include user-driven timetable scanning via an AI API, geolocation to suggest nearby masjids, and a scalable backend database. This is an urgent project with a one-week timeline, achievable with the assistance of AI tools (e.g., Grok by xAI) for coding, debugging, and optimization.

Key Features
Cross-Platform App (Android & iOS):
Built with Flutter or React Native for rapid deployment.
Simple UI: List of masjids with multi-select functionality (checkboxes).
Local storage to save user preferences (e.g., SQLite or SharedPreferences).
Home Screen Widget:
Displays prayer times for user-selected masjids (e.g., "Masjid Al-Noor - Fajr: 5:30 AM").
Android: Use AppWidgetProvider.
iOS: Use WidgetKit (iOS 14+).
Syncs with app data in real-time.
Timetable Scanning with AI:
Feature to upload timetable images (PNG/JPG) and convert them to JSON.
Integrate an AI API (e.g., Google Cloud Vision, AWS Textract, or OpenAI with Vision).
Prompt example: "Extract prayer times from this image into JSON: {'MasjidName': 'Masjid X', 'Fajr': '5:30 AM', ...}".
Users scan and submit timetables for their local masjids.
Geolocation:
Use device location (e.g., Flutter’s geolocator) to suggest nearby masjids.
Request coarse location permission, fetch masjids within a 10-mile radius.
Backend & Database:
RESTful API (Node.js/Flask) to handle masjid data and user submissions.
PostgreSQL with PostGIS for geospatial support.
Tables:
Masjids: id, name, address, location (GEOGRAPHY), contact_info (JSON).
Prayer_Times: id, masjid_id, date, prayer_data (JSON), source.
Users: id, username, email (for submissions).
Project Plan & Timeline (1 Week)
With AI assistance (e.g., Grok), this project can be completed in 7 days by leveraging pre-built libraries, APIs, and rapid prototyping. Here’s the breakdown:

Day 1: Setup & Design
Set up Flutter/React Native project.
Design basic UI (masjid list, widget layout) using wireframes.
AI assistance: Generate boilerplate code and UI snippets.
Day 2: Core App Functionality
Implement masjid selection and local storage.
Build widget for Android (AppWidgetProvider) and iOS (WidgetKit).
AI assistance: Debug widget sync and optimize performance.
Day 3: Geolocation
Add geolocator for location access.
Query database for nearby masjids using PostGIS.
AI assistance: Write geospatial query and test edge cases.
Day 4: Timetable Scanning
Integrate AI API (e.g., Google Vision or OpenAI) for image-to-JSON conversion.
Build upload feature (Flutter’s image_picker or JS for web).
AI assistance: Craft API prompt and parse response.
Day 5: Backend & Database
Set up Node.js/Flask API with PostgreSQL/PostGIS.
Create database schema and API endpoints (GET masjids, POST timetable).
AI assistance: Generate schema and API code.
Day 6: Testing & Polish
Test app on Android/iOS simulators and physical devices.
Fix bugs, optimize UI, ensure widget refreshes correctly.
AI assistance: Automate test cases and suggest fixes.
Day 7: Deployment Prep
Package app for Google Play and App Store.
Prepare store listings (screenshots, descriptions).
Submit for review (Google Play: ~1-3 days, App Store: ~1-7 days, expedited if needed).
Deliverables
Fully functional Flutter/React Native app (APK and IPA files).
Source code with documentation.
Backend API and database setup (deployable to a cloud service like AWS/Heroku).
Brief setup guide for AI API integration.
